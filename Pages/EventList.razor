@page "/events"
@using CS_FS04.Shared
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager

<h2>Lista de Eventos</h2>
<button class="btn btn-success" @onclick="() => showAddEvent = true">Registrar nuevo evento</button>

@if (showAddEvent)
{
    <EditForm Model="newEvent" OnValidSubmit="AddEvent">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label>Nombre:</label>
            <InputText @bind-Value="newEvent.Name" class="form-control" />
        </div>
        <div>
            <label>Fecha:</label>
            <InputDate @bind-Value="newEvent.Date" class="form-control" />
        </div>
        <div>
            <label>Ubicaci√≥n:</label>
            <InputText @bind-Value="newEvent.Location" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="() => showAddEvent = false">Cancelar</button>
    </EditForm>
}

@foreach (var ev in Events.AsParallel())
{
    <div class="mb-4">
        <EventCard Event="ev" />
        <button class="btn btn-link" @onclick="() => ToggleRegistrados(ev.Id)">Ver registrados</button>
        @if (showRegistrados.Contains(ev.Id))
        {
            <ul>
                @if (RegistradosPorEvento.ContainsKey(ev.Id) && RegistradosPorEvento[ev.Id].Count > 0)
                {
                    @foreach (var reg in RegistradosPorEvento[ev.Id])
                    {
                        <li>@reg.Nombre (@reg.Email)</li>
                    }
                }
                else
                {
                    <li>No hay registrados para este evento.</li>
                }
            </ul>
        }
    </div>
}

@code {
    List<EventModel> Events = new List<EventModel>
    {
        new EventModel { Id = 1, Name = "Conferencia Tech 2025", Date = new DateTime(2025, 6, 10), Location = "Madrid" },
        new EventModel { Id = 2, Name = "Gala Empresarial", Date = new DateTime(2025, 7, 5), Location = "Barcelona" },
        new EventModel { Id = 3, Name = "Networking Creativo", Date = new DateTime(2025, 8, 20), Location = "Valencia" }
    };

    bool showAddEvent = false;
    EventModel newEvent = new EventModel { Date = DateTime.Today };

    // Diccionario para almacenar los registrados por evento
    Dictionary<int, List<RegistradoModel>> RegistradosPorEvento = new Dictionary<int, List<RegistradoModel>>
    {
        { 1, new List<RegistradoModel> { new RegistradoModel { Nombre = "Ana", Email = "ana@email.com" } } },
        { 2, new List<RegistradoModel>() },
        { 3, new List<RegistradoModel> { new RegistradoModel { Nombre = "Luis", Email = "luis@email.com" }, new RegistradoModel { Nombre = "Marta", Email = "marta@email.com" } } }
    };

    HashSet<int> showRegistrados = new HashSet<int>();

    void AddEvent()
    {
        newEvent.Id = Events.Count > 0 ? Events.Max(e => e.Id) + 1 : 1;
        Events.Add(new EventModel { Id = newEvent.Id, Name = newEvent.Name, Date = newEvent.Date, Location = newEvent.Location });
        RegistradosPorEvento[newEvent.Id] = new List<RegistradoModel>();
        newEvent = new EventModel { Date = DateTime.Today };
        showAddEvent = false;
    }

    void ToggleRegistrados(int eventId)
    {
        if (!showRegistrados.Add(eventId))
            showRegistrados.Remove(eventId);
    }

    public class RegistradoModel
    {
        public string Nombre { get; set; }
        public string Email { get; set; }
    }
}
